"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _fs = _interopRequireDefault(require("fs"));

var _querystring = _interopRequireDefault(require("querystring"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class Media {
  static get PATH() {
    return "/v3/media";
  }

  constructor(credentials, options) {
    this.creds = credentials;
    this.options = options;
  }

  upload(opts, callback) {
    opts = opts || {};

    if (!opts.file && !opts.url) {
      throw new Error("You must provide either 'file' or 'url' to upload a file");
    }

    if (opts.file) {
      opts.file = _fs.default.createReadStream(opts.file);
    }

    return this.options.api.postFile(Media.PATH, opts, function (err, response, body) {
      if (err) {
        return callback(err);
      }

      var location = "";

      if (response && response.headers) {
        location = response.headers.location;
      }

      return callback(null, location);
    }, true);
  }

  search(options, callback) {
    if (typeof options == "function" && !callback) {
      callback = options;
      options = {};
    }

    options = options || {};
    return this._makeRequest("GET", Media.PATH, options, {}, callback);
  } // If If-Modified-Since header is provided and the data hasn't changed, the
  // user will receive an empty body in the callback, NOT an error


  download(id, headers, callback) {
    if (!callback && typeof headers == "function") {
      callback = headers;
      headers = {};
    }

    return this._makeRequest("GET", "".concat(Media.PATH, "/").concat(id), {}, headers, callback, true);
  }

  delete(id, callback) {
    return this._makeRequest("DELETE", "".concat(Media.PATH, "/").concat(id), {}, {}, callback);
  }

  get(id, callback) {
    return this._makeRequest("GET", "".concat(Media.PATH, "/").concat(id, "/info"), {}, {}, callback);
  }

  update(id, opts, callback) {
    return this._makeRequest("PUT", "".concat(Media.PATH, "/").concat(id, "/info"), opts, {}, callback);
  }

  _makeRequest(verb, path, options, headers, callback, skipJsonParsing) {
    headers = Object.assign({
      "Content-Type": "application/json",
      Authorization: "Bearer ".concat(this.creds.generateJwt())
    }, headers);
    var req = {};

    if (verb.toUpperCase() === "GET") {
      if (Object.keys(options).length) {
        path = path + "?" + _querystring.default.stringify(options);
      }
    } else {
      req["body"] = JSON.stringify(options);
    }

    req["path"] = path;
    req["headers"] = headers;
    return this.options.api.request(req, verb, callback, skipJsonParsing);
  }

}

var _default = Media;
exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9NZWRpYS5qcyJdLCJuYW1lcyI6WyJNZWRpYSIsIlBBVEgiLCJjb25zdHJ1Y3RvciIsImNyZWRlbnRpYWxzIiwib3B0aW9ucyIsImNyZWRzIiwidXBsb2FkIiwib3B0cyIsImNhbGxiYWNrIiwiZmlsZSIsInVybCIsIkVycm9yIiwiZnMiLCJjcmVhdGVSZWFkU3RyZWFtIiwiYXBpIiwicG9zdEZpbGUiLCJlcnIiLCJyZXNwb25zZSIsImJvZHkiLCJsb2NhdGlvbiIsImhlYWRlcnMiLCJzZWFyY2giLCJfbWFrZVJlcXVlc3QiLCJkb3dubG9hZCIsImlkIiwiZGVsZXRlIiwiZ2V0IiwidXBkYXRlIiwidmVyYiIsInBhdGgiLCJza2lwSnNvblBhcnNpbmciLCJPYmplY3QiLCJhc3NpZ24iLCJBdXRob3JpemF0aW9uIiwiZ2VuZXJhdGVKd3QiLCJyZXEiLCJ0b1VwcGVyQ2FzZSIsImtleXMiLCJsZW5ndGgiLCJxdWVyeXN0cmluZyIsInN0cmluZ2lmeSIsIkpTT04iLCJyZXF1ZXN0Il0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7OztBQUVBOztBQUNBOzs7O0FBRUEsTUFBTUEsS0FBTixDQUFZO0FBQ0ssYUFBSkMsSUFBSSxHQUFHO0FBQ2hCLFdBQU8sV0FBUDtBQUNEOztBQUVEQyxFQUFBQSxXQUFXLENBQUNDLFdBQUQsRUFBY0MsT0FBZCxFQUF1QjtBQUNoQyxTQUFLQyxLQUFMLEdBQWFGLFdBQWI7QUFDQSxTQUFLQyxPQUFMLEdBQWVBLE9BQWY7QUFDRDs7QUFFREUsRUFBQUEsTUFBTSxDQUFDQyxJQUFELEVBQU9DLFFBQVAsRUFBaUI7QUFDckJELElBQUFBLElBQUksR0FBR0EsSUFBSSxJQUFJLEVBQWY7O0FBQ0EsUUFBSSxDQUFDQSxJQUFJLENBQUNFLElBQU4sSUFBYyxDQUFDRixJQUFJLENBQUNHLEdBQXhCLEVBQTZCO0FBQzNCLFlBQU0sSUFBSUMsS0FBSixDQUNKLDBEQURJLENBQU47QUFHRDs7QUFFRCxRQUFJSixJQUFJLENBQUNFLElBQVQs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LEVBQVo7QUFGZixLQURRLEVBS1JkLE9BTFEsQ0FBVjtBQVFBLFFBQUllLEdBQUcsR0FBRyxFQUFWOztBQUNBLFFBQUlQLElBQUksQ0FBQ1EsV0FBTCxPQUF1QixLQUEzQixFQUFrQztBQUNoQyxVQUFJTCxNQUFNLENBQUNNLElBQVAsQ0FBWWpDLE9BQVosRUFBcUJrQyxNQUF6QixFQUFpQztBQUMvQlQsUUFBQUEsSUFBSSxHQUFHQSxJQUFJLEdBQUcsR0FBUCxHQUFhVSxxQkFBWUMsU0FBWixDQUFzQnBDLE9BQXRCLENBQXBCO0FBQ0Q7QUFDRixLQUpELE1BSU87QUFDTCtCLE1BQUFBLEdBQUcsQ0FBQyxNQUFELENBQUgsR0FBY00sSUFBSSxDQUFDRCxTQUFMLENBQWVwQyxPQUFmLENBQWQ7QUFDRDs7QUFFRCtCLElBQUFBLEdBQUcsQ0FBQyxNQUFELENBQUgsR0FBY04sSUFBZDtBQUNBTSxJQUFBQSxHQUFHLENBQUMsU0FBRCxDQUFILEdBQWlCZixPQUFqQjtBQUVBLFdBQU8sS0FBS2hCLE9BQUwsQ0FBYVUsR0FBYixDQUFpQjRCLE9BQWpCLENBQXlCUCxHQUF6QixFQUE4QlAsSUFBOUIsRUFBb0NwQixRQUFwQyxFQUE4Q3NCLGVBQTlDLENBQVA7QUFDRDs7QUFuSFM7O2VBc0hHOUIsSyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgZnMgZnJvbSBcImZzXCI7XG5pbXBvcnQgcXVlcnlzdHJpbmcgZnJvbSBcInF1ZXJ5c3RyaW5nXCI7XG5cbmNsYXNzIE1lZGlhIHtcbiAgc3RhdGljIGdldCBQQVRIKCkge1xuICAgIHJldHVybiBcIi92My9tZWRpYVwiO1xuICB9XG5cbiAgY29uc3RydWN0b3IoY3JlZGVudGlhbHMsIG9wdGlvbnMpIHtcbiAgICB0aGlzLmNyZWRzID0gY3JlZGVudGlhbHM7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgfVxuXG4gIHVwbG9hZChvcHRzLCBjYWxsYmFjaykge1xuICAgIG9wdHMgPSBvcHRzIHx8IHt9O1xuICAgIGlmICghb3B0cy5maWxlICYmICFvcHRzLnVybCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBcIllvdSBtdXN0IHByb3ZpZGUgZWl0aGVyICdmaWxlJyBvciAndXJsJyB0byB1cGxvYWQgYSBmaWxlXCJcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKG9wdHMuZmlsZSkge1xuICAgICAgb3B0cy5maWxlID0gZnMuY3JlYXRlUmVhZFN0cmVhbShvcHRzLmZpbGUpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5vcHRpb25zLmFwaS5wb3N0RmlsZShcbiAgICAgIE1lZGlhLlBBVEgsXG4gICAgICBvcHRzLFxuICAgICAgZnVuY3Rpb24gKGVyciwgcmVzcG9uc2UsIGJvZHkpIHtcbiAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgIHJldHVybiBjYWxsYmFjayhlcnIpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGxvY2F0aW9uID0gXCJcIjtcbiAgICAgICAgaWYgKHJlc3BvbnNlICYmIHJlc3BvbnNlLmhlYWRlcnMpIHtcbiAgICAgICAgICBsb2NhdGlvbiA9IHJlc3BvbnNlLmhlYWRlcnMubG9jYXRpb247XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY2FsbGJhY2sobnVsbCwgbG9jYXRpb24pO1xuICAgICAgfSxcbiAgICAgIHRydWVcbiAgICApO1xuICB9XG5cbiAgc2VhcmNoKG9wdGlvbnMsIGNhbGxiYWNrKSB7XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zID09IFwiZnVuY3Rpb25cIiAmJiAhY2FsbGJhY2spIHtcbiAgICAgIGNhbGxiYWNrID0gb3B0aW9ucztcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG5cbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAgIHJldHVybiB0aGlzLl9tYWtlUmVxdWVzdChcIkdFVFwiLCBNZWRpYS5QQVRILCBvcHRpb25zLCB7fSwgY2FsbGJhY2spO1xuICB9XG5cbiAgLy8gSWYgSWYtTW9kaWZpZWQtU2luY2UgaGVhZGVyIGlzIHByb3ZpZGVkIGFuZCB0aGUgZGF0YSBoYXNuJ3QgY2hhbmdlZCwgdGhlXG4gIC8vIHVzZXIgd2lsbCByZWNlaXZlIGFuIGVtcHR5IGJvZHkgaW4gdGhlIGNhbGxiYWNrLCBOT1QgYW4gZXJyb3JcbiAgZG93bmxvYWQoaWQsIGhlYWRlcnMsIGNhbGxiYWNrKSB7XG4gICAgaWYgKCFjYWxsYmFjayAmJiB0eXBlb2YgaGVhZGVycyA9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgIGNhbGxiYWNrID0gaGVhZGVycztcbiAgICAgIGhlYWRlcnMgPSB7fTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fbWFrZVJlcXVlc3QoXG4gICAgICBcIkdFVFwiLFxuICAgICAgYCR7TWVkaWEuUEFUSH0vJHtpZH1gLFxuICAgICAge30sXG4gICAgICBoZWFkZXJzLFxuICAgICAgY2FsbGJhY2ssXG4gICAgICB0cnVlXG4gICAgKTtcbiAgfVxuXG4gIGRlbGV0ZShpZCwgY2FsbGJhY2spIHtcbiAgICByZXR1cm4gdGhpcy5fbWFrZVJlcXVlc3QoXCJERUxFVEVcIiwgYCR7TWVkaWEuUEFUSH0vJHtpZH1gLCB7fSwge30sIGNhbGxiYWNrKTtcbiAgfVxuXG4gIGdldChpZCwgY2FsbGJhY2spIHtcbiAgICByZXR1cm4gdGhpcy5fbWFrZVJlcXVlc3QoXG4gICAgICBcIkdFVFwiLFxuICAgICAgYCR7TWVkaWEuUEFUSH0vJHtpZH0vaW5mb2AsXG4gICAgICB7fSxcbiAgICAgIHt9LFxuICAgICAgY2FsbGJhY2tcbiAgICApO1xuICB9XG5cbiAgdXBkYXRlKGlkLCBvcHRzLCBjYWxsYmFjaykge1xuICAgIHJldHVybiB0aGlzLl9tYWtlUmVxdWVzdChcbiAgICAgIFwiUFVUXCIsXG4gICAgICBgJHtNZWRpYS5QQVRIfS8ke2lkfS9pbmZvYCxcbiAgICAgIG9wdHMsXG4gICAgICB7fSxcbiAgICAgIGNhbGxiYWNrXG4gICAgKTtcbiAgfVxuXG4gIF9tYWtlUmVxdWVzdCh2ZXJiLCBwYXRoLCBvcHRpb25zLCBoZWFkZXJzLCBjYWxsYmFjaywgc2tpcEpzb25QYXJzaW5nKSB7XG4gICAgaGVhZGVycyA9IE9iamVjdC5hc3NpZ24oXG4gICAgICB7XG4gICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiLFxuICAgICAgICBBdXRob3JpemF0aW9uOiBgQmVhcmVyICR7dGhpcy5jcmVkcy5nZW5lcmF0ZUp3dCgpfWAsXG4gICAgICB9LFxuICAgICAgaGVhZGVyc1xuICAgICk7XG5cbiAgICBsZXQgcmVxID0ge307XG4gICAgaWYgKHZlcmIudG9VcHBlckNhc2UoKSA9PT0gXCJHRVRcIikge1xuICAgICAgaWYgKE9iamVjdC5rZXlzKG9wdGlvbnMpLmxlbmd0aCkge1xuICAgICAgICBwYXRoID0gcGF0aCArIFwiP1wiICsgcXVlcnlzdHJpbmcuc3RyaW5naWZ5KG9wdGlvbnMpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXFbXCJib2R5XCJdID0gSlNPTi5zdHJpbmdpZnkob3B0aW9ucyk7XG4gICAgfVxuXG4gICAgcmVxW1wicGF0aFwiXSA9IHBhdGg7XG4gICAgcmVxW1wiaGVhZGVyc1wiXSA9IGhlYWRlcnM7XG5cbiAgICByZXR1cm4gdGhpcy5vcHRpb25zLmFwaS5yZXF1ZXN0KHJlcSwgdmVyYiwgY2FsbGJhY2ssIHNraXBKc29uUGFyc2luZyk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTWVkaWE7XG4iXX0=