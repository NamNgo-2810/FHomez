"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _index = _interopRequireDefault(require("./index"));

var _Utils = _interopRequireDefault(require("./Utils"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Provides access to the `events` resource.
 */
class Events {
  /**
   * The path to the `events` resource.
   */
  static get PATH() {
    return "/beta/conversations/{conversation_uuid}/events";
  }

  static get BETA2_PATH() {
    return "/beta2/conversations/{conversation_uuid}/events";
  }
  /**
   * Creates a new Events instance.
   *
   * @param {Credentials} creds - Credentials used when interacting with the Nexmo API.
   * @param {Object} options - additional options for the class.
   */


  constructor(creds, options) {
    this.creds = creds;
    this.options = options;
  }
  /**
   * Creates an event in a conversation.
   *
   * @param {string} conversationId - The unique identifier for the conversation
   * @param {Object} params - Parameters used when adding an event to the conversation. See https://developer.nexmo.com/api/conversation#createEvent for more information.
   * @param {function} callback - function to be called when the request completes.
   */


  create(conversationId, params, callback) {
    params = JSON.stringify(params);
    var config = {
      host: this.options.apiHost || "api.nexmo.com",
      path: Events.PATH.replace("{conversation_uuid}", conversationId),
      method: "POST",
      body: params,
      headers: {
        "Content-Type": "application/json",
        Authorization: "Bearer ".concat(this.creds.generateJwt())
      }
    };
    this.options.httpClient.request(config, callback);
  }
  /**
   * Get an existing event.
   *
   * @param {string} conversationId - The unique identifier for the conversation
   * @param {string|object} query - The unique identifier for the event to retrieve
   *               or a set of filter parameters for the query. For more information
   *               see https://developer.nexmo.com/api/conversation#getEvents
   * @param {function} callback - function to be called when the request completes.
   */


  get(conversationId, query, callback) {
    var config = {
      host: this.options.apiHost || "api.nexmo.com",
      path: _Utils.default.createPathWithQuery(Events.BETA2_PATH.replace("{conversation_uuid}", conversationId), query),
      method: "GET",
      body: undefined,
      headers: {
        "Content-Type": "application/json",
        Authorization: "Bearer ".concat(this.creds.generateJwt())
      }
    };
    this.options.httpClient.request(config, callback);
  }
  /**
   * Get next page of events for a conversation.
   *
   * @param {object} response - The response from a paginated events list
   *               see https://ea.developer.nexmo.com/api/conversation#getEvents
   * @param {function} callback - function to be called when the request completes.
   */


  next(response, callback) {
    if (response._links.next) {
      var conversationId = response._links.next.href.match(/CON-[^/]*/g);

      this.get(conversationId, _Utils.default.getQuery(response._links.next.href), callback);
    } else {
      var error = new Error("The response doesn't have a next page.");
      callback(error, null);
    }
  }
  /**
   * Get previous page of events for a conversation.
   *
   * @param {object} response - The response from a paginated events list
   *               see https://ea.developer.nexmo.com/api/conversation#getEvents
   * @param {function} callback - function to be called when the request completes.
   */


  prev(response, callback) {
    if (response._links.prev) {
      var conversationId = response._links.prev.href.match(/CON-[^/]*/g);

      this.get(conversationId, _Utils.default.getQuery(response._links.prev.href), callback);
    } else {
      var error = new Error("The response doesn't have a previous page.");
      callback(error, null);
    }
  }
  /**
   * Deleta an existing event.
   *
   * @param {string} conversationId- The unique identifier for the conversation to delete the event from.
   * @param {string} eventId - The unique identifier for the event to delete.
   * @param {function} callback - function to be called when the request completes.
   */


  delete(conversationId, eventId, callback) {
    var config = {
      host: this.options.apiHost || "api.nexmo.com",
      path: "".concat(Events.PATH.replace("{conversation_uuid}", conversationId), "/").concat(eventId),
      method: "DELETE",
      headers: {
        "Content-Type": "application/json",
        Authorization: "Bearer ".concat(this.creds.generateJwt())
      }
    };
    this.options.httpClient.request(config, callback);
  }

}

var _default = Events;
exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,