"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var fs = require("fs");

class FilesResource {
  /**
   * The path to the `calls` resource.
   */
  static get PATH() {
    return "/v1/files";
  }
  /**
   * Creates a new FilesResource.
   *
   * @param {Credentials} creds - Credentials used when interacting with the Vonage API.
   * @param {Object} options - additional options for the class.
   */


  constructor(creds, options) {
    this.creds = creds;
    this.options = options;
  }
  /**
   * Get stream for a remote File
   *
   * @param {string} [fileIdOrUrl] - The unique identifier or URL for the file
   * @param {function} callback - function to be called when the request completes.
   */


  get(fileIdOrUrl, callback) {
    if (!fileIdOrUrl) {
      throw new Error('"fileIdOrUrl" is a required parameter');
    }

    fileIdOrUrl = fileIdOrUrl.split("/").pop(-1);
    var config = {
      host: this.options.apiHost || "api.nexmo.com",
      path: "".concat(FilesResource.PATH, "/").concat(fileIdOrUrl),
      method: "GET",
      headers: {
        "Content-Type": "application/octet-stream",
        Authorization: "Bearer ".concat(this.creds.generateJwt())
      }
    };
    this.options.httpClient.request(config, callback);
  }
  /**
   * Save remote File locally
   *
   * @param {string} [fileIdOrUrl] - The unique identifier or URL for the file
   * @param {string} [file] - Filename or file descriptor
   * @param {function} callback - function to be called when the request completes.
   */


  save(fileIdOrUrl, file, callback) {
    this.get(fileIdOrUrl, (error, data) => {
      if (error) {
        callback(error, null);
      } else {
        this.__storeFile(data, file, callback);
      }
    });
  }

  __storeFile(data, file, callback) {
    fs.writeFile(file, data, error => {
      if (error) {
        callback(error, null);
      } else {
        callback(null, file);
      }
    });
  }

}

var _default = FilesResource;
exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9GaWxlc1Jlc291cmNlLmpzIl0sIm5hbWVzIjpbImZzIiwicmVxdWlyZSIsIkZpbGVzUmVzb3VyY2UiLCJQQVRIIiwiY29uc3RydWN0b3IiLCJjcmVkcyIsIm9wdGlvbnMiLCJnZXQiLCJmaWxlSWRPclVybCIsImNhbGxiYWNrIiwiRXJyb3IiLCJzcGxpdCIsInBvcCIsImNvbmZpZyIsImhvc3QiLCJhcGlIb3N0IiwicGF0aCIsIm1ldGhvZCIsImhlYWRlcnMiLCJBdXRob3JpemF0aW9uIiwiZ2VuZXJhdGVKd3QiLCJodHRwQ2xpZW50IiwicmVxdWVzdCIsInNhdmUiLCJmaWxlIiwiZXJyb3IiLCJkYXRhIiwiX19zdG9yZUZpbGUiLCJ3cml0ZUZpbGUiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7O0FBRUEsSUFBSUEsRUFBRSxHQUFHQyxPQUFPLENBQUMsSUFBRCxDQUFoQjs7QUFFQSxNQUFNQyxhQUFOLENBQW9CO0FBQ2xCO0FBQ0Y7QUFDQTtBQUNpQixhQUFKQyxJQUFJLEdBQUc7QUFDaEIsV0FBTyxXQUFQO0FBQ0Q7QUFFRDtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNFQyxFQUFBQSxXQUFXLENBQUNDLEtBQUQsRUFBUUMsT0FBUixFQUFpQjtBQUMxQixTQUFLRCxLQUFMLEdBQWFBLEtBQWI7QUFDQSxTQUFLQyxPQUFMLEdBQWVBLE9BQWY7QUFDRDtBQUVEO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0VDLEVBQUFBLEdBQUcsQ0FBQ0MsV0FBRCxFQUFjQyxRQUFkLEVBQXdCO0FBQ3pCLFFBQUksQ0FBQ0QsV0FBTCxFQUFrQjtBQUNoQixZQUFNLElBQUlFLEtBQUosQ0FBVSx1Q0FBVixDQUFOO0FBQ0Q7O0FBRURGLElBQUFBLFdBQVcsR0FBR0EsV0FBVyxDQUFDRyxLQUFaLENBQWtCLEdBQWxCLEVBQXVCQyxHQUF2QixDQUEyQixDQUFDLENBQTVCLENBQWQ7QUFFQSxRQUFJQyxNQUFNLEdBQUc7QUFDWEMsTUFBQUEsSUFBSSxFQUFFLEtBQUtSLE9BQUwsQ0FBYVMsT0FBYixJQUF3QixlQURuQjtBQUVYQyxNQUFBQSxJQUFJLFlBQUtkLGFBQWEsQ0FBQ0MsSUFBbkIsY0FBMkJLLFdBQTNCLENBRk87QUFHWFMsTUFBQUEsTUFBTSxFQUFFLEtBSEc7QUFJWEMsTUFBQUEsT0FBTyxFQUFFO0FBQ1Asd0JBQWdCLDBCQURUO0FBRVBDLFFBQUFBLGFBQWEsbUJBQVksS0FBS2QsS0FBTCxDQUFXZSxXQUFYLEVBQVo7QUFGTjtBQUpFLEtBQWI7QUFVQSxTQUFLZCxPQUFMLENBQWFlLFVBQWIsQ0FBd0JDLE9BQXhCLENBQWdDVCxNQUFoQyxFQUF3Q0osUUFBeEM7QUFDRDtBQUVEO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDRWMsRUFBQUEsSUFBSSxDQUFDZixXQUFELEVBQWNnQixJQUFkLEVBQW9CZixRQUFwQixFQUE4QjtBQUNoQyxTQUFLRixHQUFMLENBQVNDLFdBQVQsRUFBc0IsQ0FBQ2lCLEtBQUQsRUFBUUMsSUFBUixLQUFpQjtBQUNyQyxVQUFJRCxLQUFKLEVBQVc7QUFDVGhCLFFBQUFBLFFBQVEsQ0FBQ2dCLEtBQUQsRUFBUSxJQUFSLENBQVI7QUFDRCxPQUZELE1BRU87QUFDTCxhQUFLRSxXQUFMLENBQWlCRCxJQUFqQixFQUF1QkYsSUFBdkIsRUFBNkJmLFFBQTdCO0FBQ0Q7QUFDRixLQU5EO0FBT0Q7O0FBRURrQixFQUFBQSxXQUFXLENBQUNELElBQUQsRUFBT0YsSUFBUCxFQUFhZixRQUFiLEVBQXVCO0FBQ2hDVCxJQUFBQSxFQUFFLENBQUM0QixTQUFILENBQWFKLElBQWIsRUFBbUJFLElBQW5CLEVBQTBCRCxLQUFELElBQVc7QUFDbEMsVUFBSUEsS0FBSixFQUFXO0FBQ1RoQixRQUFBQSxRQUFRLENBQUNnQixLQUFELEVBQVEsSUFBUixDQUFSO0FBQ0QsT0FGRCxNQUVPO0FBQ0xoQixRQUFBQSxRQUFRLENBQUMsSUFBRCxFQUFPZSxJQUFQLENBQVI7QUFDRDtBQUNGLEtBTkQ7QUFPRDs7QUF0RWlCOztlQXlFTHRCLGEiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxudmFyIGZzID0gcmVxdWlyZShcImZzXCIpO1xuXG5jbGFzcyBGaWxlc1Jlc291cmNlIHtcbiAgLyoqXG4gICAqIFRoZSBwYXRoIHRvIHRoZSBgY2FsbHNgIHJlc291cmNlLlxuICAgKi9cbiAgc3RhdGljIGdldCBQQVRIKCkge1xuICAgIHJldHVybiBcIi92MS9maWxlc1wiO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgRmlsZXNSZXNvdXJjZS5cbiAgICpcbiAgICogQHBhcmFtIHtDcmVkZW50aWFsc30gY3JlZHMgLSBDcmVkZW50aWFscyB1c2VkIHdoZW4gaW50ZXJhY3Rpbmcgd2l0aCB0aGUgVm9uYWdlIEFQSS5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBhZGRpdGlvbmFsIG9wdGlvbnMgZm9yIHRoZSBjbGFzcy5cbiAgICovXG4gIGNvbnN0cnVjdG9yKGNyZWRzLCBvcHRpb25zKSB7XG4gICAgdGhpcy5jcmVkcyA9IGNyZWRzO1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHN0cmVhbSBmb3IgYSByZW1vdGUgRmlsZVxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW2ZpbGVJZE9yVXJsXSAtIFRoZSB1bmlxdWUgaWRlbnRpZmllciBvciBVUkwgZm9yIHRoZSBmaWxlXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrIC0gZnVuY3Rpb24gdG8gYmUgY2FsbGVkIHdoZW4gdGhlIHJlcXVlc3QgY29tcGxldGVzLlxuICAgKi9cbiAgZ2V0KGZpbGVJZE9yVXJsLCBjYWxsYmFjaykge1xuICAgIGlmICghZmlsZUlkT3JVcmwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignXCJmaWxlSWRPclVybFwiIGlzIGEgcmVxdWlyZWQgcGFyYW1ldGVyJyk7XG4gICAgfVxuXG4gICAgZmlsZUlkT3JVcmwgPSBmaWxlSWRPclVybC5zcGxpdChcIi9cIikucG9wKC0xKTtcblxuICAgIHZhciBjb25maWcgPSB7XG4gICAgICBob3N0OiB0aGlzLm9wdGlvbnMuYXBpSG9zdCB8fCBcImFwaS5uZXhtby5jb21cIixcbiAgICAgIHBhdGg6IGAke0ZpbGVzUmVzb3VyY2UuUEFUSH0vJHtmaWxlSWRPclVybH1gLFxuICAgICAgbWV0aG9kOiBcIkdFVFwiLFxuICAgICAgaGVhZGVyczoge1xuICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL29jdGV0LXN0cmVhbVwiLFxuICAgICAgICBBdXRob3JpemF0aW9uOiBgQmVhcmVyICR7dGhpcy5jcmVkcy5nZW5lcmF0ZUp3dCgpfWAsXG4gICAgICB9LFxuICAgIH07XG5cbiAgICB0aGlzLm9wdGlvbnMuaHR0cENsaWVudC5yZXF1ZXN0KGNvbmZpZywgY2FsbGJhY2spO1xuICB9XG5cbiAgLyoqXG4gICAqIFNhdmUgcmVtb3RlIEZpbGUgbG9jYWxseVxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW2ZpbGVJZE9yVXJsXSAtIFRoZSB1bmlxdWUgaWRlbnRpZmllciBvciBVUkwgZm9yIHRoZSBmaWxlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbZmlsZV0gLSBGaWxlbmFtZSBvciBmaWxlIGRlc2NyaXB0b3JcbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgLSBmdW5jdGlvbiB0byBiZSBjYWxsZWQgd2hlbiB0aGUgcmVxdWVzdCBjb21wbGV0ZXMuXG4gICAqL1xuICBzYXZlKGZpbGVJZE9yVXJsLCBmaWxlLCBjYWxsYmFjaykge1xuICAgIHRoaXMuZ2V0KGZpbGVJZE9yVXJsLCAoZXJyb3IsIGRhdGEpID0+IHtcbiAgICAgIGlmIChlcnJvcikge1xuICAgICAgICBjYWxsYmFjayhlcnJvciwgbnVsbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9fc3RvcmVGaWxlKGRhdGEsIGZpbGUsIGNhbGxiYWNrKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIF9fc3RvcmVGaWxlKGRhdGEsIGZpbGUsIGNhbGxiYWNrKSB7XG4gICAgZnMud3JpdGVGaWxlKGZpbGUsIGRhdGEsIChlcnJvcikgPT4ge1xuICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgIGNhbGxiYWNrKGVycm9yLCBudWxsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhbGxiYWNrKG51bGwsIGZpbGUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEZpbGVzUmVzb3VyY2U7XG4iXX0=