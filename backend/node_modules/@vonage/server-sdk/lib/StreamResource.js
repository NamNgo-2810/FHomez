"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

/**
 * Provides access to the `stream` resource.
 */
class StreamResource {
  /**
   * The path to the `stream` resource.
   */
  static get PATH() {
    return "/v1/calls/{call_uuid}/stream";
  }
  /**
   * Creates a new StreamResource.
   *
   * @param {Credentials} creds - Credentials used when interacting with the Vonage API.
   * @param {Object} options - additional options for the class.
   */


  constructor(creds, options) {
    this.creds = creds;
    this.options = options;
  }
  /**
   * Starts a stream in a call.
   *
   * @param {Object} params - Parameters used when starting the stream. See https://developer.nexmo.com/api/voice#stream for more information.
   * @param {function} callback - function to be called when the request completes.
   */


  start(callId, params, callback) {
    params = JSON.stringify(params);
    var config = {
      host: this.options.apiHost || "api.nexmo.com",
      path: StreamResource.PATH.replace("{call_uuid}", callId),
      method: "PUT",
      body: params,
      headers: {
        "Content-Type": "application/json",
        "Content-Length": Buffer.byteLength(params),
        Authorization: "Bearer ".concat(this.creds.generateJwt())
      }
    };
    this.options.httpClient.request(config, callback);
  }
  /**
   * Stop a stream in a call.
   *
   * @param {string} callId - The unique identifier for the call for the stream to be stopped in.
   * @param {function} callback - function to be called when the request completes.
   */


  stop(callId, callback) {
    var config = {
      host: this.options.apiHost || "api.nexmo.com",
      path: StreamResource.PATH.replace("{call_uuid}", callId),
      method: "DELETE",
      headers: {
        "Content-Type": "application/json",
        Authorization: "Bearer ".concat(this.creds.generateJwt())
      }
    };
    this.options.httpClient.request(config, callback);
  }

}

var _default = StreamResource;
exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9TdHJlYW1SZXNvdXJjZS5qcyJdLCJuYW1lcyI6WyJTdHJlYW1SZXNvdXJjZSIsIlBBVEgiLCJjb25zdHJ1Y3RvciIsImNyZWRzIiwib3B0aW9ucyIsInN0YXJ0IiwiY2FsbElkIiwicGFyYW1zIiwiY2FsbGJhY2siLCJKU09OIiwic3RyaW5naWZ5IiwiY29uZmlnIiwiaG9zdCIsImFwaUhvc3QiLCJwYXRoIiwicmVwbGFjZSIsIm1ldGhvZCIsImJvZHkiLCJoZWFkZXJzIiwiQnVmZmVyIiwiYnl0ZUxlbmd0aCIsIkF1dGhvcml6YXRpb24iLCJnZW5lcmF0ZUp3dCIsImh0dHBDbGllbnQiLCJyZXF1ZXN0Iiwic3RvcCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBLE1BQU1BLGNBQU4sQ0FBcUI7QUFDbkI7QUFDRjtBQUNBO0FBQ2lCLGFBQUpDLElBQUksR0FBRztBQUNoQixXQUFPLDhCQUFQO0FBQ0Q7QUFFRDtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNFQyxFQUFBQSxXQUFXLENBQUNDLEtBQUQsRUFBUUMsT0FBUixFQUFpQjtBQUMxQixTQUFLRCxLQUFMLEdBQWFBLEtBQWI7QUFDQSxTQUFLQyxPQUFMLEdBQWVBLE9BQWY7QUFDRDtBQUVEO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0VDLEVBQUFBLEtBQUssQ0FBQ0MsTUFBRCxFQUFTQyxNQUFULEVBQWlCQyxRQUFqQixFQUEyQjtBQUM5QkQsSUFBQUEsTUFBTSxHQUFHRSxJQUFJLENBQUNDLFNBQUwsQ0FBZUgsTUFBZixDQUFUO0FBRUEsUUFBSUksTUFBTSxHQUFHO0FBQ1hDLE1BQUFBLElBQUksRUFBRSxLQUFLUixPQUFMLENBQWFTLE9BQWIsSUFBd0IsZUFEbkI7QUFFWEMsTUFBQUEsSUFBSSxFQUFFZCxjQUFjLENBQUNDLElBQWYsQ0FBb0JjLE9BQXBCLENBQTRCLGFBQTVCLEVBQTJDVCxNQUEzQyxDQUZLO0FBR1hVLE1BQUFBLE1BQU0sRUFBRSxLQUhHO0FBSVhDLE1BQUFBLElBQUksRUFBRVYsTUFKSztBQUtYVyxNQUFBQSxPQUFPLEVBQUU7QUFDUCx3QkFBZ0Isa0JBRFQ7QUFFUCwwQkFBa0JDLE1BQU0sQ0FBQ0MsVUFBUCxDQUFrQmIsTUFBbEIsQ0FGWDtBQUdQYyxRQUFBQSxhQUFhLG1CQUFZLEtBQUtsQixLQUFMLENBQVdtQixXQUFYLEVBQVo7QUFITjtBQUxFLEtBQWI7QUFXQSxTQUFLbEIsT0FBTCxDQUFhbUIsVUFBYixDQUF3QkMsT0FBeEIsQ0FBZ0NiLE1BQWhDLEVBQXdDSCxRQUF4QztBQUNEO0FBRUQ7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDRWlCLEVBQUFBLElBQUksQ0FBQ25CLE1BQUQsRUFBU0UsUUFBVCxFQUFtQjtBQUNyQixRQUFJRyxNQUFNLEdBQUc7QUFDWEMsTUFBQUEsSUFBSSxFQUFFLEtBQUtSLE9BQUwsQ0FBYVMsT0FBYixJQUF3QixlQURuQjtBQUVYQyxNQUFBQSxJQUFJLEVBQUVkLGNBQWMsQ0FBQ0MsSUFBZixDQUFvQmMsT0FBcEIsQ0FBNEIsYUFBNUIsRUFBMkNULE1BQTNDLENBRks7QUFHWFUsTUFBQUEsTUFBTSxFQUFFLFFBSEc7QUFJWEUsTUFBQUEsT0FBTyxFQUFFO0FBQ1Asd0JBQWdCLGtCQURUO0FBRVBHLFFBQUFBLGFBQWEsbUJBQVksS0FBS2xCLEtBQUwsQ0FBV21CLFdBQVgsRUFBWjtBQUZOO0FBSkUsS0FBYjtBQVNBLFNBQUtsQixPQUFMLENBQWFtQixVQUFiLENBQXdCQyxPQUF4QixDQUFnQ2IsTUFBaEMsRUFBd0NILFFBQXhDO0FBQ0Q7O0FBM0RrQjs7ZUE4RE5SLGMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFByb3ZpZGVzIGFjY2VzcyB0byB0aGUgYHN0cmVhbWAgcmVzb3VyY2UuXG4gKi9cbmNsYXNzIFN0cmVhbVJlc291cmNlIHtcbiAgLyoqXG4gICAqIFRoZSBwYXRoIHRvIHRoZSBgc3RyZWFtYCByZXNvdXJjZS5cbiAgICovXG4gIHN0YXRpYyBnZXQgUEFUSCgpIHtcbiAgICByZXR1cm4gXCIvdjEvY2FsbHMve2NhbGxfdXVpZH0vc3RyZWFtXCI7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBTdHJlYW1SZXNvdXJjZS5cbiAgICpcbiAgICogQHBhcmFtIHtDcmVkZW50aWFsc30gY3JlZHMgLSBDcmVkZW50aWFscyB1c2VkIHdoZW4gaW50ZXJhY3Rpbmcgd2l0aCB0aGUgVm9uYWdlIEFQSS5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBhZGRpdGlvbmFsIG9wdGlvbnMgZm9yIHRoZSBjbGFzcy5cbiAgICovXG4gIGNvbnN0cnVjdG9yKGNyZWRzLCBvcHRpb25zKSB7XG4gICAgdGhpcy5jcmVkcyA9IGNyZWRzO1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gIH1cblxuICAvKipcbiAgICogU3RhcnRzIGEgc3RyZWFtIGluIGEgY2FsbC5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IHBhcmFtcyAtIFBhcmFtZXRlcnMgdXNlZCB3aGVuIHN0YXJ0aW5nIHRoZSBzdHJlYW0uIFNlZSBodHRwczovL2RldmVsb3Blci5uZXhtby5jb20vYXBpL3ZvaWNlI3N0cmVhbSBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2sgLSBmdW5jdGlvbiB0byBiZSBjYWxsZWQgd2hlbiB0aGUgcmVxdWVzdCBjb21wbGV0ZXMuXG4gICAqL1xuICBzdGFydChjYWxsSWQsIHBhcmFtcywgY2FsbGJhY2spIHtcbiAgICBwYXJhbXMgPSBKU09OLnN0cmluZ2lmeShwYXJhbXMpO1xuXG4gICAgdmFyIGNvbmZpZyA9IHtcbiAgICAgIGhvc3Q6IHRoaXMub3B0aW9ucy5hcGlIb3N0IHx8IFwiYXBpLm5leG1vLmNvbVwiLFxuICAgICAgcGF0aDogU3RyZWFtUmVzb3VyY2UuUEFUSC5yZXBsYWNlKFwie2NhbGxfdXVpZH1cIiwgY2FsbElkKSxcbiAgICAgIG1ldGhvZDogXCJQVVRcIixcbiAgICAgIGJvZHk6IHBhcmFtcyxcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgICAgIFwiQ29udGVudC1MZW5ndGhcIjogQnVmZmVyLmJ5dGVMZW5ndGgocGFyYW1zKSxcbiAgICAgICAgQXV0aG9yaXphdGlvbjogYEJlYXJlciAke3RoaXMuY3JlZHMuZ2VuZXJhdGVKd3QoKX1gLFxuICAgICAgfSxcbiAgICB9O1xuICAgIHRoaXMub3B0aW9ucy5odHRwQ2xpZW50LnJlcXVlc3QoY29uZmlnLCBjYWxsYmFjayk7XG4gIH1cblxuICAvKipcbiAgICogU3RvcCBhIHN0cmVhbSBpbiBhIGNhbGwuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjYWxsSWQgLSBUaGUgdW5pcXVlIGlkZW50aWZpZXIgZm9yIHRoZSBjYWxsIGZvciB0aGUgc3RyZWFtIHRvIGJlIHN0b3BwZWQgaW4uXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrIC0gZnVuY3Rpb24gdG8gYmUgY2FsbGVkIHdoZW4gdGhlIHJlcXVlc3QgY29tcGxldGVzLlxuICAgKi9cbiAgc3RvcChjYWxsSWQsIGNhbGxiYWNrKSB7XG4gICAgdmFyIGNvbmZpZyA9IHtcbiAgICAgIGhvc3Q6IHRoaXMub3B0aW9ucy5hcGlIb3N0IHx8IFwiYXBpLm5leG1vLmNvbVwiLFxuICAgICAgcGF0aDogU3RyZWFtUmVzb3VyY2UuUEFUSC5yZXBsYWNlKFwie2NhbGxfdXVpZH1cIiwgY2FsbElkKSxcbiAgICAgIG1ldGhvZDogXCJERUxFVEVcIixcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgXCJDb250ZW50LVR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCIsXG4gICAgICAgIEF1dGhvcml6YXRpb246IGBCZWFyZXIgJHt0aGlzLmNyZWRzLmdlbmVyYXRlSnd0KCl9YCxcbiAgICAgIH0sXG4gICAgfTtcbiAgICB0aGlzLm9wdGlvbnMuaHR0cENsaWVudC5yZXF1ZXN0KGNvbmZpZywgY2FsbGJhY2spO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFN0cmVhbVJlc291cmNlO1xuIl19