"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _querystring = _interopRequireDefault(require("querystring"));

var _StreamResource = _interopRequireDefault(require("./StreamResource"));

var _TalkResource = _interopRequireDefault(require("./TalkResource"));

var _DtmfResource = _interopRequireDefault(require("./DtmfResource"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Provides access to the `calls` resource.
 */
class CallsResource {
  /**
   * The path to the `calls` resource.
   */
  static get PATH() {
    return "/v1/calls";
  }
  /**
   * Creates a new CallsResource.
   *
   * @param {Credentials} creds - Credentials used when interacting with the Vonage API.
   * @param {Object} options - additional options for the class.
   */


  constructor(creds, options) {
    this.creds = creds;
    this.options = options;
    /**
     * @type StreamController
     */

    this.stream = new _StreamResource.default(this.creds, this.options);
    /**
     * @type TalkResource
     */

    this.talk = new _TalkResource.default(this.creds, this.options);
    /**
     * @type DtmfResource
     */

    this.dtmf = new _DtmfResource.default(this.creds, this.options);
  }
  /**
   * Create a new call.
   *
   * @param {Object} params - Parameters used when creating the call. See https://developer.nexmo.com/api/voice#create-an-outbound-call for more information.
   * @param {function} callback - function to be called when the request completes.
   */


  create(params, callback) {
    params = JSON.stringify(params);
    var config = {
      host: this.options.apiHost || "api.nexmo.com",
      path: CallsResource.PATH,
      method: "POST",
      body: params,
      headers: {
        "Content-Type": "application/json",
        "Content-Length": Buffer.byteLength(params),
        Authorization: "Bearer ".concat(this.creds.generateJwt())
      }
    };
    this.options.httpClient.request(config, callback);
  }
  /**
   * Get an existing call.
   *
   * @param {string|object} query - The unique identifier for the call to retrieve
   *               or a set of filter parameters for the query. For more information
   *               see https://docs.nexmo.com/voice/voice-api/api-reference#call_retrieve
   * @param {function} callback - function to be called when the request completes.
   */


  get(query, callback) {
    if (!query) {
      throw new Error('"query" is a required parameter');
    }

    var pathExt = "";

    if (typeof query === "string") {
      // single call Id
      pathExt = "/".concat(query);
    } else if (typeof query === "object" && Object.keys(query).length > 0) {
      // filter
      pathExt = "?".concat(_querystring.default.stringify(query));
    }

    var config = {
      host: this.options.apiHost || "api.nexmo.com",
      path: "".concat(CallsResource.PATH).concat(pathExt),
      method: "GET",
      headers: {
        "Content-Type": "application/json",
        Authorization: "Bearer ".concat(this.creds.generateJwt())
      }
    };
    this.options.httpClient.request(config, callback);
  }
  /**
   * Update an existing call.
   *
   * @param {string} [callId] - The unique identifier for the call to update.
   * @param {Object} params - Parameters used when updating the call. See https://developer.nexmo.com/api/voice#modify-an-existing-call for more information.
   * @param {function} callback - function to be called when the request completes.
   */


  update(callId, params, callback) {
    params = JSON.stringify(params);
    var config = {
      host: this.options.apiHost || "api.nexmo.com",
      path: "".concat(CallsResource.PATH, "/").concat(callId),
      method: "PUT",
      body: params,
      headers: {
        "Content-Type": "application/json",
        "Content-Length": Buffer.byteLength(params),
        Authorization: "Bearer ".concat(this.creds.generateJwt())
      }
    };
    this.options.httpClient.request(config, callback);
  }

}

var _default = CallsResource;
exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,