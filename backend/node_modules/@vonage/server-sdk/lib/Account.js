"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

class Account {
  /**
   * @param {Credentials} credentials
   *    credentials to be used when interacting with the API.
   * @param {Object} options
   *    Addition Account options.
   */
  constructor(credentials) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    this.creds = credentials;
    this.options = options;
  }
  /**
   * TODO: document
   */


  checkBalance(callback) {
    return this.options.rest.get("/account/get-balance", callback);
  }

  updatePassword(newSecret, callback) {
    return this.options.rest.postUseQueryString("/account/settings", {
      newSecret
    }, callback);
  }

  updateSMSCallback(moCallBackUrl, callback) {
    return this.options.rest.postUseQueryString("/account/settings", {
      moCallBackUrl
    }, callback);
  }

  updateDeliveryReceiptCallback(drCallBackUrl, callback) {
    return this.options.rest.postUseQueryString("/account/settings", {
      drCallBackUrl
    }, callback);
  }

  topUp(trx, callback) {
    return this.options.rest.postUseQueryString("/account/top-up", {
      trx
    }, callback);
  }

  listSecrets(apiKey, callback) {
    return this.options.api.get("/accounts/" + apiKey + "/secrets", {}, callback, false, true);
  }

  getSecret(apiKey, id, callback) {
    return this.options.api.get("/accounts/" + apiKey + "/secrets/" + id, {}, callback, false, true);
  }

  createSecret(apiKey, secret, callback) {
    return this.options.api.postJson("/accounts/" + apiKey + "/secrets/", {
      secret: secret
    }, callback, false, true);
  }

  deleteSecret(apiKey, id, callback) {
    return this.options.api.delete("/accounts/" + apiKey + "/secrets/" + id, callback, false, true);
  }

}

var _default = Account;
exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9BY2NvdW50LmpzIl0sIm5hbWVzIjpbIkFjY291bnQiLCJjb25zdHJ1Y3RvciIsImNyZWRlbnRpYWxzIiwib3B0aW9ucyIsImNyZWRzIiwiY2hlY2tCYWxhbmNlIiwiY2FsbGJhY2siLCJyZXN0IiwiZ2V0IiwidXBkYXRlUGFzc3dvcmQiLCJuZXdTZWNyZXQiLCJwb3N0VXNlUXVlcnlTdHJpbmciLCJ1cGRhdGVTTVNDYWxsYmFjayIsIm1vQ2FsbEJhY2tVcmwiLCJ1cGRhdGVEZWxpdmVyeVJlY2VpcHRDYWxsYmFjayIsImRyQ2FsbEJhY2tVcmwiLCJ0b3BVcCIsInRyeCIsImxpc3RTZWNyZXRzIiwiYXBpS2V5IiwiYXBpIiwiZ2V0U2VjcmV0IiwiaWQiLCJjcmVhdGVTZWNyZXQiLCJzZWNyZXQiLCJwb3N0SnNvbiIsImRlbGV0ZVNlY3JldCIsImRlbGV0ZSJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7QUFFQSxNQUFNQSxPQUFOLENBQWM7QUFDWjtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDRUMsRUFBQUEsV0FBVyxDQUFDQyxXQUFELEVBQTRCO0FBQUEsUUFBZEMsT0FBYyx1RUFBSixFQUFJO0FBQ3JDLFNBQUtDLEtBQUwsR0FBYUYsV0FBYjtBQUNBLFNBQUtDLE9BQUwsR0FBZUEsT0FBZjtBQUNEO0FBRUQ7QUFDRjtBQUNBOzs7QUFDRUUsRUFBQUEsWUFBWSxDQUFDQyxRQUFELEVBQVc7QUFDckIsV0FBTyxLQUFLSCxPQUFMLENBQWFJLElBQWIsQ0FBa0JDLEdBQWxCLENBQXNCLHNCQUF0QixFQUE4Q0YsUUFBOUMsQ0FBUDtBQUNEOztBQUVERyxFQUFBQSxjQUFjLENBQUNDLFNBQUQsRUFBWUosUUFBWixFQUFzQjtBQUNsQyxXQUFPLEtBQUtILE9BQUwsQ0FBYUksSUFBYixDQUFrQkksa0JBQWxCLENBQ0wsbUJBREssRUFFTDtBQUFFRCxNQUFBQTtBQUFGLEtBRkssRUFHTEosUUFISyxDQUFQO0FBS0Q7O0FBRURNLEVBQUFBLGlCQUFpQixDQUFDQyxhQUFELEVBQWdCUCxRQUFoQixFQUEwQjtBQUN6QyxXQUFPLEtBQUtILE9BQUwsQ0FBYUksSUFBYixDQUFrQkksa0JBQWxCLENBQ0wsbUJBREssRUFFTDtBQUFFRSxNQUFBQTtBQUFGLEtBRkssRUFHTFAsUUFISyxDQUFQO0FBS0Q7O0FBRURRLEVBQUFBLDZCQUE2QixDQUFDQyxhQUFELEVBQWdCVCxRQUFoQixFQUEwQjtBQUNyRCxXQUFPLEtBQUtILE9BQUwsQ0FBYUksSUFBYixDQUFrQkksa0JBQWxCLENBQ0wsbUJBREssRUFFTDtBQUFFSSxNQUFBQTtBQUFGLEtBRkssRUFHTFQsUUFISyxDQUFQO0FBS0Q7O0FBRURVLEVBQUFBLEtBQUssQ0FBQ0MsR0FBRCxFQUFNWCxRQUFOLEVBQWdCO0FBQ25CLFdBQU8sS0FBS0gsT0FBTCxDQUFhSSxJQUFiLENBQWtCSSxrQkFBbEIsQ0FDTCxpQkFESyxFQUVMO0FBQUVNLE1BQUFBO0FBQUYsS0FGSyxFQUdMWCxRQUhLLENBQVA7QUFLRDs7QUFFRFksRUFBQUEsV0FBVyxDQUFDQyxNQUFELEVBQVNiLFFBQVQsRUFBbUI7QUFDNUIsV0FBTyxLQUFLSCxPQUFMLENBQWFpQixHQUFiLENBQWlCWixHQUFqQixDQUNMLGVBQWVXLE1BQWYsR0FBd0IsVUFEbkIsRUFFTCxFQUZLLEVBR0xiLFFBSEssRUFJTCxLQUpLLEVBS0wsSUFMSyxDQUFQO0FBT0Q7O0FBRURlLEVBQUFBLFNBQVMsQ0FBQ0YsTUFBRCxFQUFTRyxFQUFULEVBQWFoQixRQUFiLEVBQXVCO0FBQzlCLFdBQU8sS0FBS0gsT0FBTCxDQUFhaUIsR0FBYixDQUFpQlosR0FBakIsQ0FDTCxlQUFlVyxNQUFmLEdBQXdCLFdBQXhCLEdBQXNDRyxFQURqQyxFQUVMLEVBRkssRUFHTGhCLFFBSEssRUFJTCxLQUpLLEVBS0wsSUFMSyxDQUFQO0FBT0Q7O0FBRURpQixFQUFBQSxZQUFZLENBQUNKLE1BQUQsRUFBU0ssTUFBVCxFQUFpQmxCLFFBQWpCLEVBQTJCO0FBQ3JDLFdBQU8sS0FBS0gsT0FBTCxDQUFhaUIsR0FBYixDQUFpQkssUUFBakIsQ0FDTCxlQUFlTixNQUFmLEdBQXdCLFdBRG5CLEVBRUw7QUFBRUssTUFBQUEsTUFBTSxFQUFFQTtBQUFWLEtBRkssRUFHTGxCLFFBSEssRUFJTCxLQUpLLEVBS0wsSUFMSyxDQUFQO0FBT0Q7O0FBRURvQixFQUFBQSxZQUFZLENBQUNQLE1BQUQsRUFBU0csRUFBVCxFQUFhaEIsUUFBYixFQUF1QjtBQUNqQyxXQUFPLEtBQUtILE9BQUwsQ0FBYWlCLEdBQWIsQ0FBaUJPLE1BQWpCLENBQ0wsZUFBZVIsTUFBZixHQUF3QixXQUF4QixHQUFzQ0csRUFEakMsRUFFTGhCLFFBRkssRUFHTCxLQUhLLEVBSUwsSUFKSyxDQUFQO0FBTUQ7O0FBeEZXOztlQTJGQ04sTyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5jbGFzcyBBY2NvdW50IHtcbiAgLyoqXG4gICAqIEBwYXJhbSB7Q3JlZGVudGlhbHN9IGNyZWRlbnRpYWxzXG4gICAqICAgIGNyZWRlbnRpYWxzIHRvIGJlIHVzZWQgd2hlbiBpbnRlcmFjdGluZyB3aXRoIHRoZSBBUEkuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gICAqICAgIEFkZGl0aW9uIEFjY291bnQgb3B0aW9ucy5cbiAgICovXG4gIGNvbnN0cnVjdG9yKGNyZWRlbnRpYWxzLCBvcHRpb25zID0ge30pIHtcbiAgICB0aGlzLmNyZWRzID0gY3JlZGVudGlhbHM7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgfVxuXG4gIC8qKlxuICAgKiBUT0RPOiBkb2N1bWVudFxuICAgKi9cbiAgY2hlY2tCYWxhbmNlKGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIHRoaXMub3B0aW9ucy5yZXN0LmdldChcIi9hY2NvdW50L2dldC1iYWxhbmNlXCIsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIHVwZGF0ZVBhc3N3b3JkKG5ld1NlY3JldCwgY2FsbGJhY2spIHtcbiAgICByZXR1cm4gdGhpcy5vcHRpb25zLnJlc3QucG9zdFVzZVF1ZXJ5U3RyaW5nKFxuICAgICAgXCIvYWNjb3VudC9zZXR0aW5nc1wiLFxuICAgICAgeyBuZXdTZWNyZXQgfSxcbiAgICAgIGNhbGxiYWNrXG4gICAgKTtcbiAgfVxuXG4gIHVwZGF0ZVNNU0NhbGxiYWNrKG1vQ2FsbEJhY2tVcmwsIGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIHRoaXMub3B0aW9ucy5yZXN0LnBvc3RVc2VRdWVyeVN0cmluZyhcbiAgICAgIFwiL2FjY291bnQvc2V0dGluZ3NcIixcbiAgICAgIHsgbW9DYWxsQmFja1VybCB9LFxuICAgICAgY2FsbGJhY2tcbiAgICApO1xuICB9XG5cbiAgdXBkYXRlRGVsaXZlcnlSZWNlaXB0Q2FsbGJhY2soZHJDYWxsQmFja1VybCwgY2FsbGJhY2spIHtcbiAgICByZXR1cm4gdGhpcy5vcHRpb25zLnJlc3QucG9zdFVzZVF1ZXJ5U3RyaW5nKFxuICAgICAgXCIvYWNjb3VudC9zZXR0aW5nc1wiLFxuICAgICAgeyBkckNhbGxCYWNrVXJsIH0sXG4gICAgICBjYWxsYmFja1xuICAgICk7XG4gIH1cblxuICB0b3BVcCh0cngsIGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIHRoaXMub3B0aW9ucy5yZXN0LnBvc3RVc2VRdWVyeVN0cmluZyhcbiAgICAgIFwiL2FjY291bnQvdG9wLXVwXCIsXG4gICAgICB7IHRyeCB9LFxuICAgICAgY2FsbGJhY2tcbiAgICApO1xuICB9XG5cbiAgbGlzdFNlY3JldHMoYXBpS2V5LCBjYWxsYmFjaykge1xuICAgIHJldHVybiB0aGlzLm9wdGlvbnMuYXBpLmdldChcbiAgICAgIFwiL2FjY291bnRzL1wiICsgYXBpS2V5ICsgXCIvc2VjcmV0c1wiLFxuICAgICAge30sXG4gICAgICBjYWxsYmFjayxcbiAgICAgIGZhbHNlLFxuICAgICAgdHJ1ZVxuICAgICk7XG4gIH1cblxuICBnZXRTZWNyZXQoYXBpS2V5LCBpZCwgY2FsbGJhY2spIHtcbiAgICByZXR1cm4gdGhpcy5vcHRpb25zLmFwaS5nZXQoXG4gICAgICBcIi9hY2NvdW50cy9cIiArIGFwaUtleSArIFwiL3NlY3JldHMvXCIgKyBpZCxcbiAgICAgIHt9LFxuICAgICAgY2FsbGJhY2ssXG4gICAgICBmYWxzZSxcbiAgICAgIHRydWVcbiAgICApO1xuICB9XG5cbiAgY3JlYXRlU2VjcmV0KGFwaUtleSwgc2VjcmV0LCBjYWxsYmFjaykge1xuICAgIHJldHVybiB0aGlzLm9wdGlvbnMuYXBpLnBvc3RKc29uKFxuICAgICAgXCIvYWNjb3VudHMvXCIgKyBhcGlLZXkgKyBcIi9zZWNyZXRzL1wiLFxuICAgICAgeyBzZWNyZXQ6IHNlY3JldCB9LFxuICAgICAgY2FsbGJhY2ssXG4gICAgICBmYWxzZSxcbiAgICAgIHRydWVcbiAgICApO1xuICB9XG5cbiAgZGVsZXRlU2VjcmV0KGFwaUtleSwgaWQsIGNhbGxiYWNrKSB7XG4gICAgcmV0dXJuIHRoaXMub3B0aW9ucy5hcGkuZGVsZXRlKFxuICAgICAgXCIvYWNjb3VudHMvXCIgKyBhcGlLZXkgKyBcIi9zZWNyZXRzL1wiICsgaWQsXG4gICAgICBjYWxsYmFjayxcbiAgICAgIGZhbHNlLFxuICAgICAgdHJ1ZVxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQWNjb3VudDtcbiJdfQ==