"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

/**
 * Provides access to the `talk` resource.
 */
class TalkResource {
  /**
   * The path to the `talk` resource.
   */
  static get PATH() {
    return "/v1/calls/{call_uuid}/talk";
  }
  /**
   * Creates a new TalkResource.
   *
   * @param {Credentials} creds - Credentials used when interacting with the Vonage API.
   * @param {Object} options - additional options for the class.
   */


  constructor(creds, options) {
    this.creds = creds;
    this.options = options;
  }
  /**
   * Starts a talk in a call.
   *
   * @param {Object} params - Parameters used when starting the talk. See https://developer.nexmo.com/api/voice#talk for more information.
   * @param {function} callback - function to be called when the request completes.
   */


  start(callId, params, callback) {
    params = JSON.stringify(params);
    var config = {
      host: this.options.apiHost || "api.nexmo.com",
      path: TalkResource.PATH.replace("{call_uuid}", callId),
      method: "PUT",
      body: params,
      headers: {
        "Content-Type": "application/json",
        "Content-Length": Buffer.byteLength(params),
        Authorization: "Bearer ".concat(this.creds.generateJwt())
      }
    };
    this.options.httpClient.request(config, callback);
  }
  /**
   * Stop a talk in a call.
   *
   * @param {string} callId - The unique identifier for the call for the talk to be stopped in.
   * @param {function} callback - function to be called when the request completes.
   */


  stop(callId, callback) {
    var config = {
      host: this.options.apiHost || "api.nexmo.com",
      path: TalkResource.PATH.replace("{call_uuid}", callId),
      method: "DELETE",
      headers: {
        "Content-Type": "application/json",
        Authorization: "Bearer ".concat(this.creds.generateJwt())
      }
    };
    this.options.httpClient.request(config, callback);
  }

}

var _default = TalkResource;
exports.default = _default;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9UYWxrUmVzb3VyY2UuanMiXSwibmFtZXMiOlsiVGFsa1Jlc291cmNlIiwiUEFUSCIsImNvbnN0cnVjdG9yIiwiY3JlZHMiLCJvcHRpb25zIiwic3RhcnQiLCJjYWxsSWQiLCJwYXJhbXMiLCJjYWxsYmFjayIsIkpTT04iLCJzdHJpbmdpZnkiLCJjb25maWciLCJob3N0IiwiYXBpSG9zdCIsInBhdGgiLCJyZXBsYWNlIiwibWV0aG9kIiwiYm9keSIsImhlYWRlcnMiLCJCdWZmZXIiLCJieXRlTGVuZ3RoIiwiQXV0aG9yaXphdGlvbiIsImdlbmVyYXRlSnd0IiwiaHR0cENsaWVudCIsInJlcXVlc3QiLCJzdG9wIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0EsTUFBTUEsWUFBTixDQUFtQjtBQUNqQjtBQUNGO0FBQ0E7QUFDaUIsYUFBSkMsSUFBSSxHQUFHO0FBQ2hCLFdBQU8sNEJBQVA7QUFDRDtBQUVEO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0VDLEVBQUFBLFdBQVcsQ0FBQ0MsS0FBRCxFQUFRQyxPQUFSLEVBQWlCO0FBQzFCLFNBQUtELEtBQUwsR0FBYUEsS0FBYjtBQUNBLFNBQUtDLE9BQUwsR0FBZUEsT0FBZjtBQUNEO0FBRUQ7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDRUMsRUFBQUEsS0FBSyxDQUFDQyxNQUFELEVBQVNDLE1BQVQsRUFBaUJDLFFBQWpCLEVBQTJCO0FBQzlCRCxJQUFBQSxNQUFNLEdBQUdFLElBQUksQ0FBQ0MsU0FBTCxDQUFlSCxNQUFmLENBQVQ7QUFFQSxRQUFJSSxNQUFNLEdBQUc7QUFDWEMsTUFBQUEsSUFBSSxFQUFFLEtBQUtSLE9BQUwsQ0FBYVMsT0FBYixJQUF3QixlQURuQjtBQUVYQyxNQUFBQSxJQUFJLEVBQUVkLFlBQVksQ0FBQ0MsSUFBYixDQUFrQmMsT0FBbEIsQ0FBMEIsYUFBMUIsRUFBeUNULE1BQXpDLENBRks7QUFHWFUsTUFBQUEsTUFBTSxFQUFFLEtBSEc7QUFJWEMsTUFBQUEsSUFBSSxFQUFFVixNQUpLO0FBS1hXLE1BQUFBLE9BQU8sRUFBRTtBQUNQLHdCQUFnQixrQkFEVDtBQUVQLDBCQUFrQkMsTUFBTSxDQUFDQyxVQUFQLENBQWtCYixNQUFsQixDQUZYO0FBR1BjLFFBQUFBLGFBQWEsbUJBQVksS0FBS2xCLEtBQUwsQ0FBV21CLFdBQVgsRUFBWjtBQUhOO0FBTEUsS0FBYjtBQVdBLFNBQUtsQixPQUFMLENBQWFtQixVQUFiLENBQXdCQyxPQUF4QixDQUFnQ2IsTUFBaEMsRUFBd0NILFFBQXhDO0FBQ0Q7QUFFRDtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNFaUIsRUFBQUEsSUFBSSxDQUFDbkIsTUFBRCxFQUFTRSxRQUFULEVBQW1CO0FBQ3JCLFFBQUlHLE1BQU0sR0FBRztBQUNYQyxNQUFBQSxJQUFJLEVBQUUsS0FBS1IsT0FBTCxDQUFhUyxPQUFiLElBQXdCLGVBRG5CO0FBRVhDLE1BQUFBLElBQUksRUFBRWQsWUFBWSxDQUFDQyxJQUFiLENBQWtCYyxPQUFsQixDQUEwQixhQUExQixFQUF5Q1QsTUFBekMsQ0FGSztBQUdYVSxNQUFBQSxNQUFNLEVBQUUsUUFIRztBQUlYRSxNQUFBQSxPQUFPLEVBQUU7QUFDUCx3QkFBZ0Isa0JBRFQ7QUFFUEcsUUFBQUEsYUFBYSxtQkFBWSxLQUFLbEIsS0FBTCxDQUFXbUIsV0FBWCxFQUFaO0FBRk47QUFKRSxLQUFiO0FBU0EsU0FBS2xCLE9BQUwsQ0FBYW1CLFVBQWIsQ0FBd0JDLE9BQXhCLENBQWdDYixNQUFoQyxFQUF3Q0gsUUFBeEM7QUFDRDs7QUEzRGdCOztlQThESlIsWSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogUHJvdmlkZXMgYWNjZXNzIHRvIHRoZSBgdGFsa2AgcmVzb3VyY2UuXG4gKi9cbmNsYXNzIFRhbGtSZXNvdXJjZSB7XG4gIC8qKlxuICAgKiBUaGUgcGF0aCB0byB0aGUgYHRhbGtgIHJlc291cmNlLlxuICAgKi9cbiAgc3RhdGljIGdldCBQQVRIKCkge1xuICAgIHJldHVybiBcIi92MS9jYWxscy97Y2FsbF91dWlkfS90YWxrXCI7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBUYWxrUmVzb3VyY2UuXG4gICAqXG4gICAqIEBwYXJhbSB7Q3JlZGVudGlhbHN9IGNyZWRzIC0gQ3JlZGVudGlhbHMgdXNlZCB3aGVuIGludGVyYWN0aW5nIHdpdGggdGhlIFZvbmFnZSBBUEkuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gYWRkaXRpb25hbCBvcHRpb25zIGZvciB0aGUgY2xhc3MuXG4gICAqL1xuICBjb25zdHJ1Y3RvcihjcmVkcywgb3B0aW9ucykge1xuICAgIHRoaXMuY3JlZHMgPSBjcmVkcztcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICB9XG5cbiAgLyoqXG4gICAqIFN0YXJ0cyBhIHRhbGsgaW4gYSBjYWxsLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gcGFyYW1zIC0gUGFyYW1ldGVycyB1c2VkIHdoZW4gc3RhcnRpbmcgdGhlIHRhbGsuIFNlZSBodHRwczovL2RldmVsb3Blci5uZXhtby5jb20vYXBpL3ZvaWNlI3RhbGsgZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrIC0gZnVuY3Rpb24gdG8gYmUgY2FsbGVkIHdoZW4gdGhlIHJlcXVlc3QgY29tcGxldGVzLlxuICAgKi9cbiAgc3RhcnQoY2FsbElkLCBwYXJhbXMsIGNhbGxiYWNrKSB7XG4gICAgcGFyYW1zID0gSlNPTi5zdHJpbmdpZnkocGFyYW1zKTtcblxuICAgIHZhciBjb25maWcgPSB7XG4gICAgICBob3N0OiB0aGlzLm9wdGlvbnMuYXBpSG9zdCB8fCBcImFwaS5uZXhtby5jb21cIixcbiAgICAgIHBhdGg6IFRhbGtSZXNvdXJjZS5QQVRILnJlcGxhY2UoXCJ7Y2FsbF91dWlkfVwiLCBjYWxsSWQpLFxuICAgICAgbWV0aG9kOiBcIlBVVFwiLFxuICAgICAgYm9keTogcGFyYW1zLFxuICAgICAgaGVhZGVyczoge1xuICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICAgICAgXCJDb250ZW50LUxlbmd0aFwiOiBCdWZmZXIuYnl0ZUxlbmd0aChwYXJhbXMpLFxuICAgICAgICBBdXRob3JpemF0aW9uOiBgQmVhcmVyICR7dGhpcy5jcmVkcy5nZW5lcmF0ZUp3dCgpfWAsXG4gICAgICB9LFxuICAgIH07XG4gICAgdGhpcy5vcHRpb25zLmh0dHBDbGllbnQucmVxdWVzdChjb25maWcsIGNhbGxiYWNrKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTdG9wIGEgdGFsayBpbiBhIGNhbGwuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjYWxsSWQgLSBUaGUgdW5pcXVlIGlkZW50aWZpZXIgZm9yIHRoZSBjYWxsIGZvciB0aGUgdGFsayB0byBiZSBzdG9wcGVkIGluLlxuICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFjayAtIGZ1bmN0aW9uIHRvIGJlIGNhbGxlZCB3aGVuIHRoZSByZXF1ZXN0IGNvbXBsZXRlcy5cbiAgICovXG4gIHN0b3AoY2FsbElkLCBjYWxsYmFjaykge1xuICAgIHZhciBjb25maWcgPSB7XG4gICAgICBob3N0OiB0aGlzLm9wdGlvbnMuYXBpSG9zdCB8fCBcImFwaS5uZXhtby5jb21cIixcbiAgICAgIHBhdGg6IFRhbGtSZXNvdXJjZS5QQVRILnJlcGxhY2UoXCJ7Y2FsbF91dWlkfVwiLCBjYWxsSWQpLFxuICAgICAgbWV0aG9kOiBcIkRFTEVURVwiLFxuICAgICAgaGVhZGVyczoge1xuICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICAgICAgQXV0aG9yaXphdGlvbjogYEJlYXJlciAke3RoaXMuY3JlZHMuZ2VuZXJhdGVKd3QoKX1gLFxuICAgICAgfSxcbiAgICB9O1xuICAgIHRoaXMub3B0aW9ucy5odHRwQ2xpZW50LnJlcXVlc3QoY29uZmlnLCBjYWxsYmFjayk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgVGFsa1Jlc291cmNlO1xuIl19